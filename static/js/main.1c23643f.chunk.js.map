{"version":3,"sources":["Components/Button/Button.module.css","Components/ShowNumber/ShowNumber.module.css","Components/InputValue/InputValue.module.css","Components/Button/Button.jsx","Components/ShowNumber/ShowNumber.jsx","Components/InputValue/InputValue.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","buttons","disabledButton","mousDown","colorNumberEnd","colorNumberOk","inputValue","backgroundError","Button","props","disabledButtonCSS","access","concat","css","react_default","a","createElement","Fragment","className","onClick","onClickButton","disabled","buttonsTitle","ShowNumber","styleNumber","limit","errorEnd","message","InputValue","errorColor","type","value","onChange","event","onChangeInput","currentTarget","App","state","counter","id","startValue","maxValue","errorColorStart","errorColorMax","messageAccess","messageError","onClickPlusNumber","_this","setState","_objectSpread","onClickReset","accessButtons","map","item","onClickSet","onChangeInputMaxValue","onChangeInputStartValue","render","Components_InputValue_InputValue","bind","Components_Button_Button","Components_ShowNumber_ShowNumber","React","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c23643f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Button_buttons__3yrg6\",\"disabledButton\":\"Button_disabledButton__1Tmh8\",\"mousDown\":\"Button_mousDown__3sjvu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorNumberEnd\":\"ShowNumber_colorNumberEnd__qFYkM\",\"colorNumberOk\":\"ShowNumber_colorNumberOk__bJJF_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputValue\":\"InputValue_inputValue__2rlCZ\",\"backgroundError\":\"InputValue_backgroundError__RAU8h\"};","import React from 'react';\nimport css from './Button.module.css';\n\nconst Button = props => {\n    // let state = {\n    //     mouseDown: false,\n    // };\n    // let onMouseDown=(event)=>{\n    //     if (event.onmousedown){\n    //         state.mouseDown = true;\n    //     }\n    //     else{\n    //         state.mouseDown = false;\n    //     }\n    // };\n\n    let disabledButtonCSS = props.access === false ? `${css.disabledButton}` : ``;\n    let disabledButton = props.access === false ? `disabled` : ``;\n    // let mouseDown = state.mouseDown === false ? `` : `${css.mousDown}`;\n\n    return (\n        <>\n            <button className={`${css.buttons} ${disabledButtonCSS}`}\n                    onClick={() => props.onClickButton()} disabled={disabledButton}>\n                {props.buttonsTitle}\n            </button>\n        </>\n    );\n};\n\nexport default Button;","import React from 'react'\nimport css from './ShowNumber.module.css';\n\nconst ShowNumber = props => {\n    let styleNumber = props.limit.errorEnd === true ? `${css.colorNumberEnd}` : `${css.colorNumberOk}`;\n    return (\n        <div className={`${styleNumber}`}>\n            {props.message}\n        </div>\n    );\n};\n\nexport default ShowNumber;","import React from 'react';\nimport css from './InputValue.module.css';\n\nconst InputValue = props => {\n    let errorColor = props.errorColor === true ? `${css.backgroundError}` : ``;\n    return (\n        <>\n            <input type={`number`} value={props.value} className={`${css.inputValue} ${errorColor}`}\n                   onChange={event => props.onChangeInput(+event.currentTarget.value)}/>\n        </>\n    );\n};\n\nexport default InputValue;","import React from 'react'\nimport './App.css';\nimport Button from \"./Components/Button/Button\";\nimport ShowNumber from \"./Components/ShowNumber/ShowNumber\";\nimport InputValue from \"./Components/InputValue/InputValue\";\n\nclass App extends React.Component {\n\n    state = {\n        counter: 0,\n        buttons: [\n            {id: 1, buttonsTitle: '+', access: true},\n            {id: 2, buttonsTitle: 'Reset', access: true},\n            {id: 3, buttonsTitle: 'Set', access: false},\n        ],\n        limit: {\n            startValue: 0, maxValue: 5,\n            errorColorStart: false, errorColorMax: false,\n            errorEnd: false,\n        },\n        message: 0,\n        messageAccess: \"Enter values and press 'Set'\",\n        messageError: \"Incorrect value!\"\n    };\n\n\n    onClickPlusNumber = () => {\n        if (this.state.counter < this.state.limit.maxValue) {\n\n            if (this.state.counter < this.state.limit.maxValue - 1) {\n                this.setState({\n                    counter: this.state.counter + 1,\n                    message: this.state.counter + 1,\n                    limit: {...this.state.limit, errorColorStart: false, errorColorMax: false, errorEnd: false}\n                });\n            } else {\n                this.setState({\n                    counter: this.state.counter + 1,\n                    message: this.state.counter + 1,\n                    limit: {...this.state.limit, errorEnd: true}\n                })\n            }\n\n        } else {\n            this.setState({\n                limit: {...this.state.limit, errorEnd: true}\n            })\n        }\n    };\n\n    onClickReset = () => {\n        this.setState({\n            counter: this.state.limit.startValue,\n            message: this.state.limit.startValue,\n            limit: {...this.state.limit, errorEnd: false}\n        })\n    };\n\n\n    accessButtons = (id, access) => {\n        let copyButtons = this.state.buttons.map(item => {\n            if (item.id === 3) {\n                item.access = access;\n                return item;\n            } else {\n                item.access = !access;\n                return item;\n            }\n        });\n        return copyButtons;\n    };\n\n    onClickSet = () => {\n        if (this.state.limit.maxValue > this.state.limit.startValue && this.state.limit.startValue >= 0) {\n            this.setState({\n                counter: this.state.limit.startValue,\n                message: this.state.limit.startValue,\n                buttons: this.accessButtons(3, false),\n                limit: {...this.state.limit, errorEnd: false}\n            });\n        }\n    };\n\n\n    onChangeInputMaxValue = (event) => {\n        if (event > this.state.limit.startValue) {\n            this.setState({\n                buttons: this.accessButtons(3, true),\n                limit: {...this.state.limit, maxValue: event, errorColorMax: false, errorEnd: false},\n                message: this.state.messageAccess,\n            });\n        } else {\n            this.setState({\n                buttons: this.accessButtons(3, true),\n                limit: {...this.state.limit, maxValue: event, errorColorMax: true, errorEnd: false},\n                message: this.state.messageError,\n            });\n        }\n    };\n\n    onChangeInputStartValue = (event) => {\n        if ((event >= 0) && (event < this.state.limit.maxValue)) {\n            this.setState({\n                buttons: this.accessButtons(3, true),\n                limit: {...this.state.limit, startValue: event, errorColorStart: false, errorEnd: false},\n                message: this.state.messageAccess,\n            });\n        } else if ((event < 0) || (event >= this.state.limit.maxValue)) {\n            this.setState({\n                buttons: this.accessButtons(3, true),\n                limit: {...this.state.limit, startValue: event, errorColorStart: true, errorEnd: false},\n                message: this.state.messageError,\n            });\n        }\n    };\n\n\n    render = () => {\n        return (\n            <div className={`generalBlock`}>\n                <div className={`bloks`}>\n                    <div>\n                        <div className={`content`}>\n                            <div className={`contentLine`}>\n                                <div>Max value</div>\n                                <InputValue errorColor={this.state.limit.errorColorMax}\n                                            value={this.state.limit.maxValue}\n                                            onChangeInput={this.onChangeInputMaxValue.bind(this.state)}/>\n                            </div>\n                            <div className={`contentLine`}>\n                                <div>Start value</div>\n                                <InputValue errorColor={this.state.limit.errorColorStart}\n                                            value={this.state.limit.startValue}\n                                            onChangeInput={this.onChangeInputStartValue.bind(this.state)}/>\n                            </div>\n                        </div>\n                        <div className={`interfaceManagement`}>\n                            <Button onClickButton={this.onClickSet.bind(this.state)}\n                                    buttonsTitle={this.state.buttons[2].buttonsTitle}\n                                    access={this.state.buttons[2].access}/>\n                        </div>\n                    </div>\n                </div>\n                <div className={`bloks`}>\n                    <div>\n                        <div className={`content`}>\n                            <div>\n                                <ShowNumber limit={this.state.limit} message={this.state.message}/>\n                            </div>\n                        </div>\n                        <div className={`interfaceManagement`}>\n                            <Button onClickButton={this.onClickPlusNumber.bind(this.state)}\n                                    buttonsTitle={this.state.buttons[0].buttonsTitle}\n                                    access={this.state.buttons[0].access}/>\n                            <Button onClickButton={this.onClickReset.bind(this.state)}\n                                    buttonsTitle={this.state.buttons[1].buttonsTitle}\n                                    access={this.state.buttons[1].access}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}